@node inetd
@chapter inetd
@cindex inetd

@command{Inetd} program should be run at boot time by /etc/rc (see rc(8)).
It then listens for connections on certain internet sockets.  When a
connection is found on one of its sockets, it decides what service the socket
corresponds to, and invokes a program to service the request.  The server
program is invoked with the service socket as its standard input, output
and error descriptors.  After the program is finished, inetd continues to
listen on the socket (except in some cases which will be described below).
Essentially, inetd allows running one daemon to invoke several others,
reducing load on the system.

There are two types of services that inetd can start: standard and TCPMUX.
A standard service has a well-known port assigned to it; it may be
a service that implements an official Internet standard or is a BSD-specific
service.  As described in RFC 1078, TCPMUX services are nonstandard
services that do not have a well-known port assigned to them.  They are
invoked from inetd when a program connects to the ``tcpmux'' well-known
port and specifies the service name.  This feature is useful for adding
locally-developed servers.

@menu
* Invocation::
* Configuration file::
* Built-in services::
* TCPMUX::
* Inetd Environment::
* Error Messages::
@end menu

@node Invocation
@section Invocation

Normally, @command{inetd} is invoked without any arguments.  It does,
however, support several command line options.  These are:

@table @option
@opindex -d
@opindex --debug
@item -d
@itemx --debug
Turns on debugging.  With this option, @command{inetd} stays in
foreground and prints additional debugging information of stderr.

@item -R @var{RATE}
@itemx --rate=@var{RATE}
@opindex --r
@opindex --rate
Specifies the maximum number of times a service can be invoked in
one minute; the default is 1000.

@opindex --environment
@item --environment
Pass local and remote socket information in environment variables.
@xref{Inetd Environment}.

@opindex --resolve
@item --resolve
Resolve IP addresses when setting environment variables.
@xref{Inetd Environment}.

@item -?
@itemx --help
Display a short option summary.

@item --usage
Display a short usage message

@item -V
@itemx --version
Print program version
@end table

@node Configuration file
@section Configuration file

Upon execution, inetd reads its configuration information from a configuration
pathnames on the command line, by default, @file{/etc/inetd.conf} and
@file{/etc/initd.d}.  If the configuration pathname is a directory, all the
files in the directory are read like a configuration file. All of the
configuration files are read and merged.  There must be an entry for each
field in the configuration file, with entries for each field separated by a
tab or a space.  Comments are denoted by a ``#'' at the beginning of a line.
There must be an entry for each field.  The fields of the configuration
file are summarized in the table below (optional parts are enclosed in
square brackets:

@table @asis
@item [service node:]service name
The service-name entry is the name of a valid service in the file
@file{/etc/services}. For ``internal'' services (@pxref{Built-in
services}), the service name must be the official name of the service 
(that is, the first entry in @file{/etc/services}), or a numeric
representation thereof. For TCPMUX services, the value of the
@samp{service name} field consists of the string @samp{tcpmux}
followed by a slash and the locally-chosen service name
(@pxref{TCPMUX}).

Optional @samp{service node} prefix is allowed for internet services.
When present, it supplies the local addresses @command{inetd} should
use when listening for that service. @samp{Service node} consists of
a comma-separated list of addresses. Both symbolic host names and
numeric IP addresses are allowed. Symbolic hostnames are looked up
in DNS service. If a hostname has multiple address mappings,
@command{inetd} creates a socket to listen on each address.

To avoid repeating an address that occurs frequently, a line with a
host address specifier and colon, but no further fields is allowed,
e.g.:

@smallexample
127.0.0.1,192.168.0.5:
@end smallexample

The address specifier from such a line is remembered and used for all
further lines lacking an explicit host specifier.  Such a default
address remains in effect until another such line or end of the
configuration is encountered, whichever occurs first. 

A special hostname @samp{*} stands for @code{INADDR_ANY}. When used in
a normal configuration line, it causes the default address specifier
to be ignored for that line.  When used in a default address
specification, e.g.:

@smallexample
*:
@end smallexample

it causes any previous default address specifier to be forgotten.

@item socket type
The socket type should be one of @samp{stream}, @samp{dgram},
@samp{raw}, @samp{rdm}, or @samp{seqpacket}, depending on whether the
socket is a stream, datagram, raw, reliably delivered message, or
sequenced packet socket.  TCPMUX services must use @samp{stream}.

@item protocol
The protocol must be a valid protocol as given in @file{/etc/protocols}.
Examples might be @samp{tcp} or @samp{udp}.  TCPMUX services must use
@samp{tcp}.  If IPv6 support is enabled the sockets will accept both IPv4
and IPv6 connections if that is supported by the OS.  If inetd should only
accept IPv4 or IPv6 connections, add @samp{4} or @samp{6} to the
protocol name.  For example @samp{tcp4} will only accept IPv4 tcp
connections and @samp{udp6} will only accept IPv6 udp connections.

@item wait/nowait[.max]
The @samp{wait/nowait} entry specifies whether the server that is
invoked by @command{inetd} will take over the socket associated with
the service access point, and thus whether inetd should wait for the
server to exit before listening for new service requests.  Datagram
servers must use @samp{wait}, as they are always invoked with the
original datagram socket bound to the specified service address.
These servers must read at least one datagram from the socket before
exiting.  If a datagram server connects to its peer, freeing the
socket so inetd can received further messages on the socket, it is
said to be a ``multi-threaded'' server; it should read one datagram
from the socket and create a new socket connected to the peer.  It
should fork, and the parent should then exit to allow inetd to check 
for new service requests to spawn new servers.  Datagram servers which
process all incoming datagrams on a socket and eventually time out are
said to be ``single-threaded''. @command{Comsat}
(@pxref{biff,,,biff(1)}) and talkd (@pxref{talkd,,,in.talkd(8)}) are 
both examples of the latter type of datagram server.  @command{Tftpd}
(@pxref{tftpd,,,in.tftpd(8)}) is an example of a multi-threaded
datagram server. 

Servers using stream sockets generally are multi-threaded and use the
@samp{nowait} entry.  Connection requests for these services are
accepted by inetd, and the server is given only the newly-accepted
socket connected to a client of the service.  Most stream-based
services and all TCPMUX services operate in this manner.  For such
services, the number of running instances of the server can be
limitied by specifying optional @samp{max} suffix (a decimal number),
e.g.: @samp{nowait.15}. 

Stream-based servers that use @samp{wait} are started with the
listening service socket, and must accept at least one connection
request before exiting.  Such a server would normally accept and
process incoming connection requests until a timeout.  services
must use @samp{nowait}.  

@item user
The user entry should contain the user name of the user as whom the server
should run.  This allows for servers to be given less permission than root.

@item server program
The server-program entry should contain the pathname of the program which
is to be executed by inetd when a request is found on its socket.  If
inetd provides this service internally, this entry should be
@samp{internal}.

It is common usage to specify @file{/usr/sbin/tcpd} in this field.


@item server program arguments
The server program arguments should be just as arguments normally are,
starting with @code{argv[0]}, which is the name of the program.  If
the service is provided internally, this entry must contain the word
@samp{internal}, or be empty.
@end table


@node Built-in services
@section Built-in services

The @command{inetd} program provides several ``trivial'' services
internally by use of routines within itself.  All these services can
operate both in @samp{stream} and in @samp{dgram} mode. They are:

@table @asis
@item echo
Send back to the originating source any data received from it.
This is a debugging and measurement tool, defined in
@uref{http://www.rfc-editor.org/rfc/rfc862.txt, RFC 862 (STD0020)}.

@item discard
Silently throw away any data received.  See
@uref{http://www.rfc-editor.org/rfc/rfc863.txt, RFC 863 (STD0021)}. 

@item chargen
This is a character generator service, defined in
@uref{http://www.rfc-editor.org/rfc/rfc864.txt, RFC 864 (STD0022)}.  It can be
operated as both stream or dgram service.  When operating in @samp{stream}
mode, once a connection is established a stream of data is sent out
the connection (and any data received is thrown away).  This
continues until the calling user terminates the connection.  When
operating in @samp{dgram} mode, @command{inetd} listens for UDP
datagrams, and for each received datagram, answers with a datagram
containing a random number (between 0 and 512) of characters.  Any
data in the received datagram are ignored.

@item daytime
Send back the current date and time in a human readable form.
Any input is discarded.  

See @uref{http://www.rfc-editor.org/rfc/rfc867.txt, RFC 867 (STD0025)}

@item time
Send back the current date and time as a 32-bit integer number,
representing the number of seconds since midnight, January 1, 1900.

See @uref{http://www.rfc-editor.org/rfc/rfc868.txt, RFC 868 (STD0026)}
@end table

@node TCPMUX
@section TCPMUX
The TCPMUX protocol is defined in
@uref{http://www.rfc-editor.org/rfc/rfc1078.txt, RFC 1078} as follows:

@quotation
A TCP client connects to a foreign host on TCP port 1.  It sends the
service name followed by a carriage-return line-feed <CRLF>.  The
service name is never case sensitive. The server replies with a single
character indicating positive (+) or negative (-) acknowledgment,
immediately followed by an optional message of explanation, terminated
with a <CRLF>.  If the reply was positive, the selected protocol
begins; otherwise the connection is closed.''  The program 
is passed the TCP connection as file descriptors 0 and 1.
@end quotation

If the TCPMUX service name begins with a ``+'', @command{inetd}
returns the positive reply for the program.  This allows you to invoke
programs that use stdin/stdout without putting any special server code in them.

The special service name @samp{help} causes inetd to list TCPMUX services in
@file{inetd.conf}.

To define TCPMUX services, the configuration file must contain a
@samp{tcpmux internal} definition.

Here are several example service entries for the various types of
services:

@example
ftp           stream  tcp   nowait root  /usr/libexec/ftpd       ftpd -l
ntalk         dgram   udp   wait   root  /usr/libexec/ntalkd     ntalkd
tcpmux        stream  tcp   nowait root  internal
tcpmux/+date  stream  tcp   nowait guest /bin/date               date
tcpmux/phonebook stream tcp nowait guest /usr/bin/phonebook      phonebook
@end example

@node Inetd Environment
@section Inetd Environment
If a connection is made with a streaming protocol (@samp{stream}) and if
@option{--environment} option has been given, @command{inetd} will set
the following environment variables before starting the program:

@table @env
@item PROTO
Always @samp{TCP}.

@item TCPLOCALIP
Local IP address of the interface which accepted the connection.

@item TCPLOCALPORT
Port number on which the TCP connection was established.

@item TCPREMOTEIP
IP address of the remote client.

@item TCPREMOTEPORT
Port number on the client side of the TCP connection.
@end table

Additionally, if given the @option{--remote} option, @command{inetd}
sets the following environment variables:

@table @env
@item TCPLOCALHOST
DNS name of @env{TCPLOCALIP}.

@item TCPREMOTEHOST
DNS name of @env{TCPREMOTEIP}.
@end table

@node Error Messages
@section Error Messages
The inetd server logs error messages using syslog(3).  Important error
messages and their explanations are:

@table @samp

@item service/protocol server failing (looping), service terminated.
The number of requests for the specified service in the past minute exceeded
the limit. The limit exists to prevent a broken program or a malicious user
from swamping the system.  This message may occur for several reasons:

@enumerate 1
@item there are lots of hosts requesting the service within a short
time period,
@item a ``broken'' client program is requesting the service too
frequently,
@item a malicious user is running a program to invoke the service in a
``denial of service'' attack,
@item the invoked service program has an error that causes clients to
retry quickly.
@end enumerate

Use the @option{-R} option, as described above, to change 
the rate limit.  Once the limit is reached, the service will be reenabled
automatically in 10 minutes.

@item service/protocol: No such user 'user', service ignored
@itemx service/protocol: getpwnam: user: No such user
No entry for user exists in the passwd file. The first message occurs
when inetd (re)reads the configuration file. The second message occurs
when the service is invoked.

@item service/protocol: No such user 'user', service ignored
@itemx service/protocol: getpwnam: user: No such user
No entry for user exists in the passwd file. The first message occurs
when inetd (re)reads the configuration file. The second message occurs
when the service is invoked.

@item service: can't set uid number
@itemx service: can't set gid number
The user or group ID for the entry's user is invalid.
@end table
