@node ftp invocation
@chapter @command{ftp}: FTP client
@cindex ftp

@command{Ftp} is the user interface to the ARPANET standard File Transfer
Protocol.  The program allows a user to transfer files to and from a remote
network site.

@example
ftp [@var{option}@dots{}] [@var{host} [@var{port}]]
@end example

@table @option
@item -d
@itemx --debug
@opindex -d
@opindex --debug
Enables debugging.

@item -g
@itemx --no-glob
@opindex -g
@opindex --no-glob
Disables file name globbing.

@item -i
@itemx --no-prompt
@opindex -i
@opindex --no-prompt
Turns off interactive prompting during multiple file transfers.

@item -n
@itemx --no-login
@opindex -n
@opindex --no-login
Restrains @command{ftp} from attempting @dfn{auto-login} upon initial
connection.  If auto-login is enabled, @command{ftp} will check the
@file{.netrc} (see below) file in the user's home directory for an
entry describing an account on the remote machine.  If no entry
exists, @command{ftp} will prompt for the remote machine login name
(default is the user identity on the local machine), and, if
necessary, prompt for a password and an account with which to login. 

@item -t
@item --trace
@opindex -t
@opindex --trace
Enable packet tracing.

@item -p[@var{prompt}]
@itemx --prompt[=@var{prompt}]
@opindex -p
@opindex --prompt
Print a command-line prompt, even if not on a tty.  If @var{prompt}
is supplied, its value is used instead of the default @samp{ftp> }.
Notice, that the argument is optional.  When specified, if short
option form is used (@option{-p}) the argument should follow the
option letter immediately, @emph{without any intervening white
space characters}.  If long option is used, the argument must be
specified after an equals sign.

@item -v
@itemx --verbose
@opindex -v
@opindex --verbose
Be verbose.

@end table

@section Commands

The client host with which @command{ftp} is to communicate may be
specified on the command line.  If this is done, @command{ftp} will
immediately attempt to establish a connection to an @acronym{FTP}
server on that host; otherwise, it will enter its command interpreter
and await instructions from the user.  When @command{ftp} is awaiting
commands from the user the prompt @samp{ftp>} is provided to the user. 
The following commands are recognized by @command{ftp}:

@table @code
@anchor{ftp-shell}
@item ! [@var{command} [@var{args}]]
Invoke an interactive shell on the local machine.  If there
are arguments, the first is taken to be a command to execute
directly, with the rest of the arguments as its arguments.

@item $ @var{macro-name} [@var{args}]
Execute the macro @var{macro-name} that was defined with the macdef
command.  Arguments are passed to the macro unglobbed.

@item account [@var{passwd}]
Supply a supplemental password required by a remote system
@command{for} access to resources once a login has been successfully
completed.  If no argument is included, the user will be
prompted for an account password in a non-echoing input mode.

@item append @var{local-file} [@var{remote-file}]
Append a local file to a file on the remote machine.  If
@var{remote-file} is left unspecified, the local file name is used
in naming the remote file after being altered by any @code{ntrans}
or @code{nmap} setting.  File transfer uses the current settings for
type, format, mode, and structure.

@item ascii
Set the file transfer type to network @acronym{ASCII}. This is the
default type. 

@item bell
Arrange that a bell be sounded after each file transfer command is completed.

@item binary
Set the file transfer type to support binary image transfer.

@item bye
@itemx quit
Terminate the @acronym{FTP} session with the remote server and exit
@command{ftp}. An end of file will also terminate the session and exit.

@item case
Toggle remote computer file name case mapping during @code{mget}
commands.  When case is on (default is off), remote computer
file names with all letters in upper case are written in the
local directory with the letters mapped to lower case.

@item cd @var{remote-directory}
Change the working directory on the remote machine to remote-directory.

@item cdup
Change the remote machine working directory to the parent of
the current remote machine working directory.

@item chmod @var{mode} @var{file-name}
Change the permission modes of the file @var{file-name} on the remote
sytem to @var{mode}. 

@item close
@itemx disconnect
Terminate the @acronym{FTP} session with the remote server, and return
to the command interpreter.  Any defined macros are erased.

@item cr
Toggle carriage return stripping during @acronym{ASCII} type file retrieval.
Records are denoted by a carriage return/linefeed
sequence during @acronym{ASCII} type file transfer.  When @code{cr} is on (the
default), carriage returns are stripped from this sequence to
conform with the @acronym{UNIX} single linefeed record delimiter.
Records on non-@acronym{UNIX} remote systems may contain single linefeeds;
when an @acronym{ASCII} type transfer is made, these linefeeds
may be distinguished from a record delimiter only when cr is off.

@item delete @var{remote-file}
Delete the file @var{remote-file} on the remote machine.

@item debug [@var{debug-value}]
Toggle debugging mode.  If an optional @var{debug-value} is specified
it is used to set the debugging level.  When debugging
is on, @command{ftp} prints each command sent to the remote machine,
preceded by the string @samp{-->}.

@item dir [@var{remote-directory}] [@var{local-file}]
Print a listing of the directory contents in the directory,
@var{remote-directory}, and, optionally, placing the output in
@var{local-file}. If interactive prompting is on, @command{ftp} will prompt
the user to verify that the last argument is indeed the target local
file for receiving dir output.  If no directory is specified, the
current working directory on the remote machine is used.  If no local
file is specified, or @var{local-file} is @samp{-}, output comes to
the terminal. 

@item form @var{format}
Set the file transfer form to @var{format}. The default format is @samp{file}.

@item get @var{remote-file} [@var{local-file}]
@itemx recv @var{remote-file} [@var{local-file}]
Retrieve the @var{remote-file} and store it on the local machine.
If the local file name is not specified, it is given the same
name it has on the remote machine, subject to alteration by
the current @code{case}, @code{ntrans}, and @code{nmap} settings.  The
current settings for type, form, mode, and structure are used while
transferring the file.

@anchor{glob}
@item glob
Toggle filename expansion for @code{mdelete}, @code{mget} and @code{mput}. If
globbing is turned off with @code{glob}, the file name arguments are
taken literally and not expanded.  Globbing for @code{mput} is done
as in csh(1).  For @code{mdelete} and @code{mget}, each remote file name is
expanded separately on the remote machine and the lists are
not merged.  Expansion of a directory name is likely to be
different from expansion of the name of an ordinary file: the
exact result depends on the foreign operating system and @acronym{FTP}
server, and can be previewed by doing @code{mls remote-files -}
Note: @code{mget} and @code{mput} are not meant to transfer entire
directory subtrees of files.  That can be done by transferring a
tar(1) archive of the subtree (in binary mode). 

@item hash [@var{size}]
Toggle hash-sign (@samp{#}) printing for each data block transferred.
The size of a data block can optionally be specified.  If not given,
it defaults to 1024 bytes.

@item help [@var{command}]
@itemx ? [@var{command}]
Print an informative message about the meaning of command. If
no argument is given, @command{ftp} prints a list of the known commands.

@item idle [@var{seconds}]
Set the inactivity timer on the remote server to @var{seconds} seconds.
If seconds is omitted, the current inactivity timer is printed.

@item lcd [@var{directory}]
Change the working directory on the local machine.  If no
directory is specified, the user's home directory is used.

@item ls [@var{remote-directory}] [@var{local-file}]
Print a listing of the contents of a directory on the remote
machine.  The listing includes any system-dependent information that
the server chooses to include; for example, most
@acronym{UNIX} systems will produce output from the command @command{ls -l}.
(See also @code{nlist}.) If @var{remote}-directory is left unspecified,
the current working directory is used.  If interactive
prompting is on, @command{ftp} will prompt the user to verify that the
last argument is indeed the target local file for receiving
ls output.  If no local file is specified, or if @var{local-file}
is @samp{-}, the output is sent to the terminal.

@item macdef @var{macro-name}
Define a macro.  Subsequent lines are stored as the macro
@var{macro-name}; a null line (consecutive newline characters in a
file or carriage returns from the terminal) terminates macro
input mode.  There is a limit of 16 macros and 4096 total
characters in all defined macros.  Macros remain defined until a
close command is executed.  The macro processor interprets @samp{$}
and @samp{\} as special characters.  A @samp{$} followed by a
number (or numbers) is replaced by the corresponding argument
on the macro invocation command line.  A @samp{$} followed by an
@samp{i} signals that macro processor that the executing macro is
to be looped.  On the first pass @samp{$i} is replaced by the
first argument on the macro invocation command line, on the
second pass it is replaced by the second argument, and so on.
A @samp{\} followed by any character is replaced by that character.
Use the @samp{\} to prevent special treatment of the @samp{$}.

@item mdelete [@var{remote-files}]
Delete the remote-files on the remote machine.

@item mdir @var{remote-files} @var{local-file}
Like @code{dir}, except multiple remote files may be specified.  If
interactive prompting is on, @command{ftp} will prompt the user to verify that
the last argument is indeed the target local file for receiving
@code{mdir} output. 

@item mget @var{remote-files}
Expand the @var{remote-files} on the remote machine and do a get
for each file name thus produced.  @xref{glob}, for details on
the filename expansion.  Resulting file names will then be
processed according to  @code{case}, @code{ntrans}, and @code{nmap} settings.
Files are transferred into the local working directory, which
can be changed with @code{lcd directory}; new local directories
can be created with @code{! mkdir directory}.

@item mkdir @var{directory-name}
Make a directory on the remote machine.

@item mls @var{remote-files} @var{local-file}
Like @code{nlist}, except multiple remote files may be specified,
and the @var{local-file} must be specified.  If interactive prompting is on,
@command{ftp} will prompt the user to verify that the last
argument is indeed the target local file for receiving @code{mls} output.

@item mode [@var{mode-name}]
Set the file transfer mode to @var{mode-name}. The default mode is
@samp{stream}.

@item modtime @var{file-name}
Show the last modification time of the file on the remote machine.

@item mput @var{local-files}
Expand wild cards in the list of local files given as arguments and do
a put for each file in the resulting list.  @xref{glob}, for details of
filename expansion.  Resulting file names will then be processed
according to @code{ntrans} and @code{nmap} settings.

@item newer @var{file-name}
Get the file only if the modification time of the remote file
is more recent that the file on the current system.  If the
file does not exist on the current system, the remote file is
considered newer. Otherwise, this command is identical to get.

@item nlist [@var{remote-directory}] [@var{local-file}]
Print a  list of the files in a directory on the remote machine.
If @var{remote-directory} is left unspecified, the current
working directory is used.  If interactive prompting is on,
@command{ftp} will prompt the user to verify that the last argument is
indeed the target local file for receiving nlist output.  If
no local file is specified, or if @var{local-file} is @samp{-}, the output
is sent to the terminal.

@item nmap [@var{inpattern} @var{outpattern}]
Set or unset the filename mapping mechanism.  If no arguments
are specified, the filename mapping mechanism is unset.  If
arguments are specified, remote filenames are mapped during
@code{mput} commands and @code{put} commands issued without a
specified remote target filename.  If arguments are specified, local
filenames are mapped during @code{mget} commands and @code{get} commands
issued without a specified local target filename.  This command is
useful when connecting to a non-@acronym{UNIX} remote computer
with different file naming conventions or practices.  The
mapping follows the pattern set by @var{inpattern} and @var{outpattern}.
@var{Inpattern} is a template for incoming filenames (which may
have already been processed according to the @code{ntrans} and case
settings).  Variable templating is accomplished by including
the sequences @samp{$1}, @samp{$2}, ..., @samp{$9} in
@var{inpattern}. Use @samp{\} to prevent this special treatment of
the @samp{$} character.  All other characters are treated literally,
and are used to determine the @code{nmap} @var{inpattern} variable
values.  For example, given inpattern @samp{$1.$2} and the remote file
name @file{mydata.data}, @samp{$1} would have the value
@samp{mydata}, and @samp{$2} would have the value @samp{data}.  The
@var{outpattern} determines the resulting mapped filename. 
The sequences @samp{$1}, @samp{$2}, ...., @samp{$9} are replaced by
any value resulting from the @var{inpattern} template.  The sequence
@samp{$0} is replaced by the original filename.  Additionally, the sequence
@samp{[@var{seq1}, @var{seq2}]} is replaced by @var{seq1} if @var{seq1}
is not a null string; otherwise it is replaced by @var{seq2}. For
example, the command

@example
  nmap $1.$2.$3 [$1,$2].[$2,file]
@end example

would yield the output filename @file{myfile.data} for input filenames
@file{myfile.data} and @file{myfile.data.old}, @file{myfile.file} for
the input filename @file{myfile}, and @file{myfile.myfile} for the
input filename @file{.myfile}.  Spaces may be included in 
@var{outpattern}, as in the example: @code{nmap $1 sed "s/  *$//" > $1}.
Use the @samp{\} character to prevent special treatment of the
@samp{$}, @samp{[}, @samp{]}, and @samp{,} characters.

@item ntrans [@var{inchars} [@var{outchars}]]
Set or unset the filename character translation mechanism.
If no arguments are specified, the filename character translation
mechanism is unset.  If arguments are specified, characters in remote
filenames are translated during @code{mput} commands and @code{put}
commands issued without a specified remote target filename.  If
arguments are specified, characters in local filenames are translated
during @code{mget} commands and @code{get} commands issued without a
specified local target filename.  This command is useful when
connecting to a non-@acronym{UNIX} remote computer with different file
naming conventions or practices.  Characters in a filename matching a
character in @var{inchars} are replaced with the corresponding
character in @var{outchars}. If the character's position in
@var{inchars} is longer than the length of @var{outchars}, the
character is deleted from the file name. 

@item open @var{host} [@var{port}]
Establish a connection to the specified host @acronym{FTP} server.  An
optional port number may be supplied, in which case, @command{ftp} will
attempt to contact an @acronym{FTP} server at that port.  If the
@code{autologin} option is on (default), @command{ftp} will also
attempt to automatically log the user in to the @acronym{FTP} server
(see below). 

@item passive
Toggle passive mode.  If passive mode is turned on (default
is off), the @command{ftp} client will send a @code{PASV} command for all data
connections instead of the usual @code{PORT} command.  The @code{PASV}
command requests that the remote server open a port for the data
connection and return the address of that port.  The remote server
listens on that port and the client connects to it.  When using the
more traditional @code{PORT} command, the client listens on a port and
sends that address to the remote server, who connects back to it.
Passive mode is useful when using @command{ftp} through a gateway
router or host that controls the directionality of traffic.  (Note
that though @command{ftp} servers are required to support the
@code{PASV} command by RFC 1123, some do not.) 

@item prompt
Toggle interactive prompting.  Interactive prompting occurs
during multiple file transfers to allow the user to selectively retrieve
or store files.  If prompting is turned off
(default is on), any @code{mget} or @code{mput} will transfer all files,
and any @code{mdelete} will delete all files.

@item proxy @var{ftp-command}
Execute an @command{ftp} command on a secondary control connection.
This command allows simultaneous connection to two remote @acronym{FTP}
servers for transferring files between the two servers.  The
first proxy command should be an open, to establish the secondary control
connection.  Enter the command @code{proxy ?} to
see other ftp commands executable on the secondary connection.
The following commands behave differently when prefaced by @code{proxy}:
@code{open} will not define new macros during the auto-login process,
@code{close} will not erase existing macro definitions, @code{get} and
@code{mget} transfer files from the host on the primary control
connection to the host on the secondary control connection, and
@code{put}, @code{mput}, and @code{append} transfer files from the 
host on the secondary control connection to the host on the primary
control connection.  Third party file transfers depend upon support 
of the @acronym{FTP} protocol @code{PASV} command by the
server on the secondary control connection.

@item put @var{local-file} [@var{remote-file}]
@itemx send @var{local-file} [@var{remote-file}]
Store a local file on the remote machine.  If @var{remote-file} is left
unspecified, the local file name is used after processing according to
any @code{ntrans} or @code{nmap} settings in naming the remote file.
File transfer uses the current settings for type, format, mode, and structure.

@item pwd
Print the name of the current working directory on the remote machine.

@item quote @var{arg}@dots{}
The arguments specified are sent, verbatim, to the remote FTP server.

@item reget @var{remote-file} [@var{local-file}]
@code{Reget} acts like @code{get}, except that if @var{local-file}
exists and is smaller than @var{remote-file}, @var{local-file} is
presumed to be a partially transferred copy of @var{remote-file} and
the transfer is continued from the apparent point of failure.  This command
is useful when transferring very large files over networks
that are prone to dropping connections.

@item remotehelp [@var{command-name}]
Request help from the remote @acronym{FTP} server.  If a command-name
is specified it is supplied to the server as well.

@item remotestatus [@var{file-name}]
With no arguments, show status of remote machine.  If filename is
specified, show status of @var{file-name} on remote machine.

@item rename [@var{from}] [@var{to}]
Rename the file from on the remote machine, to the file to.

@item reset
Clear reply queue.  This command re-synchronizes command/reply
sequencing with the remote @acronym{FTP} server.  Resynchronization
may be necessary following a violation of the @acronym{FTP} protocol by
the remote server.

@item restart @var{marker}
Restart the immediately following @code{get} or @code{put} at the indicated
marker. On @acronym{UNIX} systems, marker is usually a byte offset
into the file. 

@item rmdir @var{directory-name}
Delete a directory on the remote machine.

@item runique
Toggle storing of files on the local system with unique filenames.
If a file already exists with a name equal to the
target local filename for a @code{get} or @code{mget} command, a @samp{.1} is
appended to the name.  If the resulting name matches another
existing file, a @samp{.2} is appended to the original name.  If
this process continues up to @samp{.99}, an error message is
printed, and the transfer does not take place.  The generated
unique filename will be reported.  Note that @code{runique} will not
affect local files generated from a shell command (@pxref{ftp-shell}).
The default value is off.

@item sendport
Toggle the use of @code{PORT} commands.  By default, @command{ftp}
will attempt to use a @code{PORT} command when establishing a connection
for each data transfer.  The use of @code{PORT} commands can prevent
delays when performing multiple file transfers.  If the @code{PORT}
command fails, @command{ftp} will use the default data port.  When the
use of @code{PORT} commands is disabled, no attempt will be made to
use @code{PORT} commands for each data transfer.  This is useful for
certain @acronym{FTP} implementations which do ignore @code{PORT} commands
but, incorrectly, indicate they've been accepted.

@item site @var{arg}@dots{}
The arguments specified are sent, verbatim, to the remote @acronym{FTP}
server as a @code{SITE} command.

@item size @var{file-name}
Return size of @var{file-name} on remote machine.

@item status
Show the current status of @command{ftp}.

@item struct [@var{struct-name}]
Set the file transfer structure to @var{struct-name}. By default
@samp{stream} structure is used.

@item sunique
Toggle storing of files on remote machine under unique file
names.  Remote @acronym{FTP} server must support @acronym{FTP}
protocol @code{STOU} command for successful completion.  The remote
server will report unique name.  Default value is off.

@item system
Show the type of operating system running on the remote machine.

@item tenex
Set the file transfer type to that needed to talk to @acronym{TENEX} machines.

@item trace
Toggle packet tracing.

@item type [@var{type-name}]
Set the file transfer type to @var{type-name}. If no type is specified,
the current type is printed.  The default type is network @acronym{ASCII}.

@item umask [@var{newmask}]
Set the default umask on the remote server to @var{newmask}. If
@var{newmask} is omitted, the current umask is printed.

@item user @var{user-name} [@var{password}] [@var{account}]
Identify yourself to the remote @acronym{FTP} server.  If the password
is not specified and the server requires it, @command{ftp} will prompt
the user for it (after disabling local echo).  If an account
field is not specified, and the @acronym{FTP} server requires it, the
user will be prompted for it.  If an account field is specified,
an account command will be relayed to the remote server
after the login sequence is completed if the remote server
did not require it for logging in.  Unless @command{ftp} is invoked
with @code{auto-login} disabled, this process is done automatically
on initial connection to the @acronym{FTP} server.

@item verbose
Toggle verbose mode.  In verbose mode, all responses from the
@acronym{FTP} server are displayed to the user.  In addition, if verbose
is on, when a file transfer completes, statistics regarding the
efficiency of the transfer are reported.  By default, verbose is on.

@end table

Command arguments which have embedded spaces may be quoted with quote
@samp{"} marks.

@section Aborting A File Transfer

To abort a file transfer, use the terminal interrupt key (usually
@kbd{C-C}).  Sending transfers will be immediately halted.
Receiving transfers will be halted by sending a @acronym{FTP} protocol
@acronym{ABOR} command to the remote server, and discarding any
further data received.  The speed at which this is accomplished
depends upon the remote server's support for @code{ABOR} processing. 
If the remote server does not support the @code{ABOR} command, an @samp{ftp>}
prompt will not appear until the remote server has completed sending the
requested file.

The terminal interrupt key sequence will be ignored when @command{ftp}
has completed any local processing and is awaiting a reply from the
remote server.  A long delay in this mode may result from the
@code{ABOR} processing described above, or from unexpected behavior by
the remote server, including violations of the @acronym{FTP} protocol.
If the delay results from unexpected remote server behavior, the local
@command{ftp} program must be killed by hand. 

@section File Naming Conventions

Files specified as arguments to @command{ftp} commands are processed
according to the following rules.

@enumerate

@item
If the file name @samp{-} is specified, the stdin (for reading) or stdout
(for writing) is used.

@item
If the first character of the file name is @samp{|}, the remainder of the
argument is interpreted as a shell command.  @command{Ftp} then forks a shell,
using popen(3) with the argument supplied, and reads (writes) from
the stdout (stdin).  If the shell command includes spaces, the argument
must be quoted; e.g.  @samp{" ls -lt"}.  A particularly useful example of
this mechanism is: @samp{dir more}.

@item
Failing the above checks, if @dfn{globbing} is enabled, local file
names are expanded according to the rules used in the csh(1);  c.f.
the @code{glob} command (@pxref{glob}).  If the @command{ftp} command
expects a single local file (e.g. @code{put}), only the first filename
generated by the globbing operation is used.

@item
For @code{mget} commands and @code{get} commands with unspecified local file
names, the local filename is the remote filename, which may be altered by
a @code{case}, @code{ntrans}, or @code{nmap} setting.  The resulting filename
may then be altered if @code{runique} is on.

@item
For @code{mput} commands and @code{put} commands with unspecified remote file
names, the remote filename is the local filename, which may be altered
by a @code{ntrans} or @code{nmap} setting.  The resulting filename may then
be altered by the remote server if @code{sunique} is on.

@end enumerate

@section File Transfer Parameters
The @acronym{FTP} specification specifies many parameters which may
affect a file transfer.  The type may be one of @samp{ascii},
@samp{image} (binary), @samp{ebcdic}, and
@samp{local} byte size (for PDP-10's and PDP-20's mostly).
@command{Ftp} supports the @samp{ascii} and @samp{image} types of file
transfer, plus local byte size 8 for tenex mode transfers.

@command{Ftp} supports only the default values for the remaining file
transfer parameters: @code{mode}, @code{form}, and @code{struct}.

@section The @file{.netrc} File
The @code{.netrc} file contains login and initialization information
used by the auto-login process.  It resides in the user's home
directory.  The following tokens are recognized; they may be separated
by spaces, tabs, or new-lines: 

@table @samp

@item machine name
Identify a remote machine name. The auto-login process searches
the @file{.netrc} file for a machine token that matches the remote
machine specified on the @command{ftp} command line or as an open command 
argument.  Once a match is made, the subsequent @file{.netrc} tokens
are processed, stopping when the end of file is reached or another
machine or a default token is encountered. 

@item default
This is the same as machine name except that default matches
any name.  There can be only one default token, and it must be
after all machine tokens.  This is normally used as:
@example
           default login anonymous password user@@site
@end example

thereby giving the user automatic anonymous ftp login to machines
not specified in @file{.netrc}. This can be overridden by using
the @option{-n} flag to disable auto-login.

@item login name
Identify a user on the remote machine.  If this token is present,
the auto-login process will initiate a login using the
specified name.

@item password string
Supply a password.  If this token is present, the auto-login
process will supply the specified string if the remote server
requires a password as part of the login process.  Note that if
this token is present in the @file{.netrc} file for any user other
than anonymous, @command{ftp} will abort the auto-login process if the
@file{.netrc} is readable by anyone besides the user.

@item account string
Supply an additional account password.  If this token is present,
the auto-login process will supply the specified string
if the remote server requires an additional account password,
or the auto-login process will initiate an @code{ACCT} command if it does not.

@item macdef name
Define a macro.  This token functions like the @command{ftp}
@code{macdef} command functions.  A macro is defined with the
specified name; its contents begin with the next @file{.netrc} line
and continue until a null line (consecutive new-line characters) is
encountered.  If a macro named init is defined, it is automatically
executed as the last step in the auto-login process.

@end table

Ftp utilizes the following environment variables.

@table @env

@item HOME
For default location of a @file{.netrc} file, if one exists.

@item SHELL
For default shell.

@end table

Correct execution of many commands depends upon proper behavior by the
remote server.

An error in the treatment of carriage returns in the 4.2BSD ascii-mode
transfer code has been corrected.  This correction may result in incorrect
transfers of binary files to and from 4.2BSD servers using the ascii
type.  Avoid this problem by using the binary image type.




